########################################################################
# Variables.
########################################################################

# The C compiler.
CC        = cc

# Optimization and or debugging flags for compiler and linker.
# To override flags on the commandline, use these rather than `CFLAGS'
# and `LDFLAGS'.
COPTS     = -Wall -O2
LDOPTS    = -s

# Compiler and linker flags.
CFLAGS    = $(COPTS) $(INCPATH)
LDFLAGS   = $(LDOPTS) $(LIBPATH)

# Which programs to use for installation.
INSTALL       = install -c
INSTALLBIN    = $(INSTALL) -s -m 755
INSTALLSCRIPT = $(INSTALL) -m 755
INSTALLLIB    = $(INSTALL) -m 644
INSTALLDATA   = $(INSTALL) -m 644

# Where to install programs, scripts and data.
DST           = /usr/local
BINDIR        = $(DST)/bin
SCRIPTDIR     = $(BINDIR)
LIBDIR        = $(DST)/lib

# Default toplevel directory. For subdirectories, make will be called
# with `TOP=../$(TOP)'.
TOP       = .

# Search paths for local header files and libraries.
INCPATH   = -I$(TOP)/include
LIBPATH   =

# Instead of setting `LIBPATH', we use `VPATH' for local libs.
LIBDIR    = $(TOP)/lib
VPATH     = $(LIBDIR)

# How to get dependencies. For gcc, the option `-MM' does the job.
CDEP      = $(CC) $(CFLAGS) -MM

# For doing recursive makes. Call this as `$(SUBMAKE) dir target', where
# `dir' is the subdirectory in which do make `target'. Note that `dir'
# should be one simple directory; deeper nested directories (e.g.
# foo/bar) will not work.
SUBMAKE   = $(MAKE) TOP=../$(TOP) -C

# Some shell commands not defined by default.
SED       = sed
MV        = mv -f
ECHO      = echo

# Keep co silent. The `REV' variable may be used to extract a specific
# (symbolic) revision. This must be specified when cheching out, i.e.
# by `make depend REV=V1/3'.
COFLAGS   = -q -r$(REV)

# This avoids the `co' messages from make.
CO        = @co

# As for co, a revision may be specified when making distclean.
# The version handling should be automated...
CLNFLAGS  = -r$(REV)

# Names of all C source files (for target `depend'), derived from the
# variable `OBJS'.
CFILES    = $(OBJS:.o=.c)

# Names of all object files, derived from the variable `PROGS'.
OBJS      = $(PROGS:=.o)

# Names of all generated programs. Making realclean (or distclean) will
# delete all files mentioned in this variable.
# Of course, this is empty by default.
PROGS     =

# Names of all scripts.
SCRIPTS   =

# Names of all generated libraries.
LIBS      =


# Sub directories. Set this variable to contain all sub directories of
# the current directory, in which a recursive make should be done.
# This defaults to be empty, too.
SUBDIRS   =

# Names of all files in the `RCS' directory. This is mainly used in the
# target `co', which is needed by `depend'. Since this is a variable
# intended for internal use only, it's name is all lowercase.
rcsfiles  = $(notdir $(wildcard RCS/*))

# Names of recursive targets. Whenever one of this targets is to be
# made, the same target is made in all directories specified in
# `SUBDIRS', first.
recursive = all depend undepend install clean rcsclean realclean distclean \
						foolishclean


########################################################################
# Rules.
########################################################################

# Recursive targets are no real file targets.
.PHONY: $(recursive)

# Automatic recursive make.
$(recursive)::
	$(foreach SUBDIR,$(SUBDIRS),$(SUBMAKE) $(SUBDIR) $@ &&) true

# Just to keep make silent.
.PHONY: all
all::

.PHONY: install
install::

# Cleaning up.
.PHONY: clean
clean::
	$(RM) *.o core errlist gmon.out gmon.sum

# Cleaning up unmodified source files.
.PHONY: rcsclean
rcsclean::
	@rcsclean $(CLNFLAGS)

# Cleaning up everything. In addition to making clean and rcsclean, this
# deletes all programs (defined in `PROGS'), libraries and backup
# copies.
.PHONY: realclean distclean
realclean distclean:: clean rcsclean
	$(RM) $(PROGS) *.a *.bak *~ TAGS tags REFS refs

# Yes, you can make even more then distclean :-)
# This additionally deletes the dependencies from the makefiles.
.PHONY: foolishclean
foolishclean:: undepend distclean

# Automatically generate make dependencies.
.PHONY: depend
depend:: co
	@$(MV) Makefile Makefile.bak &&                                     \
		( $(SED) '/^# DO NOT DELETE/,$$d' < Makefile.bak > Makefile &&    \
			$(ECHO) '# DO NOT DELETE' >> Makefile &&                        \
			$(ECHO) '# AUTOMATICALLY GENERATED DEPENDENCIES' >> Makefile && \
			$(CDEP) $(CFILES) >> Makefile ) ||                              \
			$(MV) Makefile.bak Makefile

# Delete automatically generated dependencies.
# I wonder if someone needs this (see also target `foolishclean').
.PHONY: undepend
undepend::
	@$(MV) Makefile Makefile.bak &&                               \
	$(SED) '/^# DO NOT DELETE/,$$d' < Makefile.bak > Makefile ||  \
	$(MV) Makefile.bak Makefile


# This target (not recursive) checks out all RCS files. It is only of
# use for bootstrapping `depend'.
.PHONY: co
co: $(rcsfiles:,v=)
